#!/bin/sh
#
# This automatically resolves all leak reports in current directory,
# generates overview dot files for them and generates graphs from
# the dot files.
#
# This file is part of sp-rtrace.
#
# Copyright (C) 2006,2007,2010 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
#
# CHANGES
# 
# 2007-07-16
# - check/complain about tool only if it's needed
# - parse both alloc leaks and unreffed Gobject reports
# 2010-08-02
# - Updated to support rtrace format and moved to sp-rtrace pacakge.
# 2010-09-10
# - Add help and update calltree options
# - If destination file is older than source file, re-create it
# - If files are already generated, don't check for / complain
#  about tools needed to generate them
# 2010-09-21
# - Update filtering options
# - Remove extra arguments from function signatures to get graphs smaller
#
# Originally this file was a part of sp-libleaks package, but moved
# to the sp-rtrace package during libleaks redesign.


count=0

if [ $# -gt 0 ]; then
	echo "usage: ${0##*/}"
	echo
	echo "Resolves all *.rtrace.txt files in current directory"
	echo "(unless corresponding *.rtrace.txt.resolved files exist)"
	echo "and generates overview callgraphs out of them using"
	echo "rtrace-calltree, python and GraphViz."
	exit 1
fi

# if path given for script, make sure rest of things can be
# executed from that path too (helps testing it)
if [ \! -z "${0%/*}" ]; then
	export PATH=$PATH:${0%/*}
fi

# -------------------------------------------------------------------
# resolve function names in all trace files
echo "Resolving all unresolved addresses in resource trace files..."
for trace in *.rtrace.txt
do
	resolved=${trace%.txt}.resolved
	if [ -f $resolved ] && [ $resolved -nt $trace ]; then
		continue
	fi

	if [ -z $(which sp-rtrace-resolve) ]; then
		echo "ERROR: 'sp-rtrace-resolve' utility missing from PATH"
		exit 1
	fi
	if [ -z $(which sp-rtrace-postproc) ]; then
		echo "ERROR: 'sp-rtrace-postproc' utility missing from PATH"
		exit 1
	fi

	echo "Removing freed allocations and resolving traces: $trace -> $resolved"
	sp-rtrace-postproc -lcri $trace > $resolved
	if [ $? != 0 ]; then
		rm $resolved
		echo "ERROR: 'sp-rtrace-resolve' call failed"
		exit 1
	fi
	count=$(($count+1))
done

# -------------------------------------------------------------------
# generate dot files for all resolved traces
echo "Generating overview .dot files of non-freed resource allocations..."
for resolved in *.rtrace.resolved
do
	dot=${resolved%.resolved}.dot
	if [ -f $dot ] && [ $dot -nt $resolved ]; then
		continue
	fi
	if [ -z $(which rtrace-calltree) ]; then
		echo "ERROR: 'rtrace-calltree' utility missing from PATH"
		exit 1
	fi
	# sed command removes args from function & method
	# signatures, including pointers to functions
	echo "Generating call tree: $resolved -> $dot"
	rtrace-calltree --type=graph --limit=3 --emph-limit=9 \
	--ignore-libc-allocs=yes --ignore-glib-internals=yes --ignore-qt-internals=yes \
	--ignore="libmeegotouch" --show-below-limit=no $resolved |\
	sed -e 's/([^0-9)][^)]*)/()/' -e 's/)(.[^)]*)//' > $dot
	if [ $? != 0 ]; then
		rm $dot
		echo "ERROR: 'rtrace-calltree' call failed"
		exit 1
	fi
	count=$(($count+1))
done

# -------------------------------------------------------------------
# generate postscript files of all dot files
dotted=0
echo "Converting allocation graph to PostScript files..."
for dot in *.rtrace.dot
do
	ps=${dot%.dot}.ps
	if [ -f $ps ] && [ $ps -nt $dot ]; then
		dotted=$((dotted+1))
		continue
	fi
	if [ -z $(which dot) ]; then
		echo "ERROR: 'dot' utility is missing from PATH"
		echo "- 'dot' it used for converting the graphs into PostScript"
		echo "- you can get it from http://www.graphviz.org/"
		echo "  (configure GraphViz with '--without-x')"
		exit 1
	fi

	echo "converting function call graphs: $dot -> $ps"
	dot -Tps $dot > $ps
	if [ $? != 0 ]; then
		rm $ps
		echo "ERROR: 'dot' (GraphViz) call failed"
		exit 1
	fi
	count=$(($count+1))
done

if [ $count -eq 0 ]; then
	if [ $dotted -eq 0 ]; then
		echo "WARNING: No .rtrace.txt, .resolved or .dot files to process."
	else
		echo "All .rtrace.txt, .resolved or .dot files already processed. Remove files to re-created them:"
		ls *.rtrace.txt *.rtrace.resolved *.rtrace.dot *.rtrace.ps
	fi
	exit 1
fi

echo
echo "REPORTS:"
ls *.ps|sed 's/^/- /'
echo
echo "DONE!"
echo
echo "Please use the 'rtrace-graphs-function' script to get more detailed"
echo "callgraphs about things done through specific functions for:"
ls *.rtrace.txt|sed 's/^/- /'
