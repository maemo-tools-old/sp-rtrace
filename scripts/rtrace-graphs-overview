#!/bin/sh
#
# A helper script to generate several overview graphs of the given
# resource traces, both timelines and a callgraph.
#
# This file is part of sp-rtrace.
#
# Copyright (C) 2006,2007,2010 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
#
# CHANGES
# 
# 2007-07-16
# - check/complain about tool only if it's needed
# - parse both alloc leaks and unreffed Gobject reports
# 2010-08-02
# - Updated this sp-libleaks utility to support rtrace format and
#   moved it to sp-rtrace package
# 2010-09-10
# - Add help and update calltree options
# - If destination file is older than source file, re-create it
# - If files are already generated, don't check for / complain
#  about tools needed to generate them
# 2010-09-21
# - Update filtering options
# - Remove extra arguments from function signatures to get graphs smaller
# 2010-10-22
# - Complete rewrite to handle both binary & text traces and
#   whether they're already processed or not.
# - The files to process need now to be given to the script.
# 2010-11-03
# - Adapt to rtrace-timeline option changes
# - Save the resulting dot files & images to *-overview/ subdirectory
# 2010-11-10
# - Adapt to further rtrace-timeline changes, remove -a argument
#   as alloc/dealloc activity chart isn't so useful in an overview
# - Handle more potential error corner-cases and check sp-rtrace version
# - Show the resulting graphs with xdg-open tool and use SVG instead of EPS

usage ()
{
	name=${0##*/}
	cat << EOF

$name is a helper script to generate several overview
graphs of the given resource traces. Graphs include both timelines
in PNG format and a callgraph as SVG file.

By default input is expected to be an unprocessed binary trace file,
but in case you want to do the address resolving on another device
(with correct binaries and debug symbols), it can also handle already
processed ASCII trace files.  These won't be post-processed or
resolved.

If tools needed for producing the graphs or the intermediate files are
missing, script will just provide the input files for these tools.

EOF
	# ' <- jed editor shell-mode workaround

	echo "usage: $name <resource trace files>"
	echo
	echo "ERROR: $1!"
	exit 1
}


# args missing?
if [ $# -lt 1 ]; then
	usage "no resource trace files given"
fi

# check which trace files are binary, which are textual or something else
texts=""
binaries=""
echo "Identifying trace file types:"
for src in $*; do
	if [ \! -f $src ]; then
		usage "given '$src' trace file doesn't exist"
	fi
	echo $src|tr A-Z a-z|grep -q -e '\.png$' -e '\.ps$' -e '\.svg$' -e '\.eps'
	if [ $? -eq 0 ]; then
		echo " - $src, SKIPPING (PNG/EPS/PS files are results, not inputs)"
		continue
	fi
	if [ "$(dd if=$src bs=1 count=1 2> /dev/null)" = "$(printf '\xF0')" ]; then
		echo "- $src: binary"
		binaries="$binaries $src"
		continue
	fi
	version=$(head -1 $src|cut -d, -f1)
	if [ "${version%=*}" != "version" ]; then
		usage "file '$src' is neither sp-rtrace binary nor text trace file"
	fi
	version=${version#*=}
	major=${version%.*}
	minor=${version#*.}
	if [ $major -lt 1 ] || [ $major -eq 1 ] && [ $minor -lt 2 ]; then
		echo "ERROR: trace file '$src' is from too old sp-rtrace (version $version < 1.2)!"
		exit 1
	fi
	echo "- $src: ASCII"
	texts="$texts $src"
done

if [ -z "$binaries" ] && [ -z "$texts" ]; then
	usage "no suitable trace files given"
fi


# if a path is given for the script, make sure rest of things
# can be executed from that path too (helps testing it)
if [ \! -z "${0%/*}" ]; then
	export PATH=$PATH:${0%/*}
fi

if [ \! -z "$binaries" ]; then
	if [ -z "$(which sp-rtrace-postproc)" ]; then
		echo "WARNING: sp-rtrace-postproc missing, skipping binary traces!"
		binaries=""
		if [ -z "$texts" ]; then
			echo "No other files to process..."
			exit 1
		fi
	fi
fi

# how many files were processed
count=0
# result directory name
dir="overview"

# ----------------------------------------------

# create timeline input files from binary traces
# 
# they are created separately from binary files because
# they need also freeing information and such files can
# be much smaller when backtrace information is removed
timelines=""
if [ \! -z "$binaries" ]; then
	echo
	echo "Converting binary trace files for timeline use:"
fi
for src in $binaries; do
	dst=${src%.txt}-timeline.txt
	echo "- $src -> $dst..."
	# newer target file?
	if [ -f $dst ] && [ $dst -nt $src ]; then
		echo $texts|grep -q $dst
		if [ $? -eq 0 ]; then
			echo "  Already included into given arguments, ignoring."
		else
			# check as text file
			echo "  Exists already, checking later."
			texts="$texts $dst"
		fi
		continue
	fi
	# convert to ASCII & remove backtrace information
	echo "  sp-rtrace-postproc -b 0 < $src > $dst"
	sp-rtrace-postproc -b 0 < $src > $dst
	if [ $? -eq 0 ]; then
		timelines="$timelines $dst"
	else
		echo "  ERROR: conversion failed!"
		rm $dst
		exit 1
	fi
done

# Check ASCII timeline inputs
if [ \! -z "$texts" ]; then
	echo
	echo "Checking ASCII trace files for timeline use:"
fi
for src in $texts; do
	head -1 $src | grep -q leaks
	if [ $? -eq 0 ]; then
		echo "- $src -> SKIPPING"
		echo "  (useless as freed resources are removed)"
		continue
	fi
	head -1 $src | grep -q compress
	if [ $? -ne 0 ]; then
		# not compressed, can be used as such
		echo "- $src -> OK"
		timelines="$timelines $src"
		continue
	fi
	# needs conversion
	dst=${src%-timeline.txt}
	dst=${dst%.txt}-timeline.txt
	echo "- $src -> $dst..."
	if [ $src = $dst ]; then
		echo "  WARNING: target file exists, but cannot be used as it's compressed"
		echo "  (events aren't in order), skipping it.  Remove the file if you want"
		echo    "it to be regenerated!"
		continue
	fi
	# newer target file?
	if [ -f $dst ] && [ $dst -nt $src ]; then
		echo $texts|grep -q $dst
		if [ $? -eq 0 ]; then
			echo "  Already included into given arguments, ignoring."
		else
			echo "  Exists already, skipping re-conversion."
			timelines="$timelines $dst"
		fi
		continue
	fi

	echo "- $src -> $dst..."
	# convert to suitable ASCII & remove backtrace information
	echo "  sp-rtrace-postproc -b 0 < $src > $dst"
	sp-rtrace-postproc -b 0 < $src > $dst
	if [ $? -eq 0 ]; then
		timelines="$timelines $dst"
	else
		echo "  ERROR: conversion failed!"
		rm $dst
		exit 1
	fi
done

# if no timeline tool, skip graphs
if [ \! -z "$timelines" ]; then
	if [ -z "$(which rtrace-timeline)" ]; then
		echo "WARNING: rtrace-timeline missing, skipping timelines creation!"
		timelines=""
	elif [ -z "$(which gnuplot)" ]; then
		# timeline notices this too, but better skip it early
		echo "WARNING: gnuplot missing, skipping timelines creation!"
		timelines=""
	fi
fi

# create timelines
if [ \! -z "$timelines" ]; then
	echo
	echo "Creating resource size histogram, allocation lifetime and unfreed total timelines:"
fi
for src in $timelines; do
	mkdir -p $dir
	dst=${src##*/}
	dst=$dir/${dst%.txt}
	echo "- $src -> $dst-*.png..."
	if [ \! -z "$(ls $dst-*.png 2> /dev/null)" ]; then
		echo "  Skipping, PNG files already created:"
		ls $dst-*.png
		continue
	fi
	echo "  rtrace-timeline -t -l -c -s -i $src -o $dst"
	rtrace-timeline -t -l -c -s -i $src -o $dst
	if [ $? -ne 0 ]; then
		echo "  ERROR: timelines creation failed!"
		exit 1
	fi
	for png in $dst-*.png; do
		echo "  xdg-open $png &"
		xdg-open $png &
	done
	count=$(($count+1))
done

# ----------------------------------------------

# create callgraph input files from binary traces
callgraphs=""
if [ \! -z "$binaries" ]; then
	echo
	echo "Converting binary trace files for callgraph use:"
fi
for src in $binaries; do	
	dst=${src%.txt}-callgraph.txt
	echo "- $src -> $dst..."
	# newer target file?
	if [ -f $dst ] && [ $dst -nt $src ]; then
		echo $texts|grep -q $dst
		if [ $? -eq 0 ]; then
			echo "  Already included into given arguments, ignoring."
		else
			# check as text file
			echo "  Exists already, checking later."
			texts="$texts $dst"
		fi
		continue
	fi
	# merge & remove leaks & resolve
	echo "  sp-rtrace-postproc -clr < $src > $dst"
	sp-rtrace-postproc -clr < $src > $dst
	if [ $? -eq 0 ]; then
		callgraphs="$callgraphs $dst"
	else
		echo "  ERROR: conversion failed!"
		rm $dst
		exit 1
	fi
done

# Check ASCII callgraph inputs
if [ \! -z "$texts" ]; then
	echo
	echo "Checking & converting ASCII trace files for callgraph use:"
fi
for src in $texts; do
	# is all necessary filtering and resolving already done?
	if [ \! -z "$(head -1 $src|grep leaks|grep compress|grep resolve)" ]; then
		# can be used as such
		echo "- $src, OK (as is)"
		callgraphs="$callgraphs $src"
		continue
	fi
	# needs conversion
	dst=${src%-callgraph.txt}
	dst=${dst%.txt}-callgraph.txt
	echo "- $src -> $dst..."
	if [ $src = $dst ]; then
		echo "  SKIPPING: target file already exists, but it lacks required filtering."
		echo "  Remove it if you want it to be regenerated correctly!"
		continue
	fi
	# newer target file?
	if [ -f $dst ] && [ $dst -nt $src ]; then
		echo $texts|grep -q $dst
		if [ $? -eq 0 ]; then
			echo "  Already included into given arguments, ignoring."
		else
			echo "  Exists already, skipping re-conversion."
			callgraphs="$callgraphs $dst"
		fi
		continue
	fi
	# check that there's something to callgraph...
	depth=$(head -1 $src|sed 's/^.*depth=\([0-9]\+\),.*$/\1/')
	if [ -z "$depth" ] || [ $depth -lt 2 ]; then
		echo "  SKIPPING: backtrace depth $depth < 2"
		continue
	fi
	# filter & resolve
	head -1 $src|grep -q resolve
	if [ $? -eq 0 ]; then
		echo "  Already resolved, doing just freed resources removal and backtrace"
		echo "  merging, for speed reasons.  Remove 'resolve' flag from first line"
		echo "  in trace to trigger resolving:"
		echo "  sp-rtrace-postproc -cl < $src > $dst"
		sp-rtrace-postproc -cl < $src > $dst
	else
		echo "  sp-rtrace-postproc -clr < $src > $dst"
		sp-rtrace-postproc -clr < $src > $dst
	fi
	if [ $? -eq 0 ]; then
		callgraphs="$callgraphs $dst"
	else
		echo "  ERROR: conversion failed!"
		rm $dst
		exit 1
	fi
done

# if no callgraph tool, skip graphs
if [ \! -z "$callgraphs" ]; then
	if [ -z "$(which rtrace-calltree)" ]; then
		echo "WARNING: rtrace-calltree missing, skipping callgraphs creation!"
		callgraphs=""
	fi
fi

# create callgraphs
if [ \! -z "$callgraphs" ]; then
	echo
	echo "Creating callgraphs:"
fi
for src in $callgraphs; do
	mkdir -p $dir
	dst=${src##*/}
	dst=$dir/${dst%.txt}.dot
	echo "- $src -> $dst..."
	# newer target file?
	if [ -f $dst ] && [ $dst -nt $src ]; then
		echo "  Skipping, GraphViz dot file already created"
		continue
	fi
	# Try to reduce overview to reasonable amount of nodes:
	# - use fairly large node alloc percentage limit
	# - remove all nodes related to code "book keeping"
	# - don't show many nodes below limit were called
	#   (means alloc amounts don't add up though...)
	rtrace-calltree \
		--type=graph --limit=5 --emph-limit=10 \
		--ignore-libc-allocs=yes --ignore-glib-internals=yes \
		--ignore-qt-internals=yes --ignore="libmeegotouch" \
		--show-below-limit=no $resolved $src > $dst.tmp
	if [ $? -ne 0 ]; then
		echo "  ERROR: callgraph creation failed!"
		rm $dst.tmp
		exit 1
	fi
	# Try to reduce node widths to reasonable sizes
	# by using sed to:
	# - remove method signature arguments
	# - split file & libnames to their own row
	sed 	-e 's/([^0-9)][^)]*)/()/' -e 's/)(.[^)]*)//' \
		-e 's/ at /\\nat /' -e 's/ in /\\nin /' \
		$dst.tmp > $dst
	rm $dst.tmp
done

# generate postscript files from .dot files
if [ \! -z "$callgraphs" ]; then
	echo
	echo "Converting callgraphs to SVG:"
fi
for i in $callgraphs; do
	mkdir -p $dir
	i=${i##*/}
	i=${i%.txt}
	src=$dir/$i.dot
	dst=$dir/$i.svg
	echo "- $src -> $dst"
	# newer target file?
	if [ -f $dst ] && [ $dst -nt $src ]; then
		echo "  Skipping, SVG file already created"
		continue
	fi
	if [ -z $(which dot) ]; then
		echo "ERROR: 'dot' utility is missing from PATH"
		echo "- 'dot' it used for converting the graphs into SVG"
		echo "- you can get it from http://www.graphviz.org/"
		echo "  (configure GraphViz with '--without-x')"
		exit 1
	fi
	echo "  dot -Tsvg $src > $dst"
	dot -Tsvg $src > $dst
	if [ $? -ne 0 ]; then
		rm $dst
		echo "ERROR: conversion failed"
		exit 1
	fi
	echo "  xdg-open $dst &"
	xdg-open $dst &
	count=$(($count+1))
done

echo
echo "---------------------------------------------------------"

if [ $count -eq 0 ]; then
	echo
	echo "WARNING: None of the *-timeline-*.png nor *-callgraph.svg"
	echo "         files needed processing."
	echo
	echo "Remove these to get images re-created:"
	ls $dir/*-timeline-*.png $dir/*-callgraph.svg
	echo
	echo "Remove these to get them and the data re-post-processed:"
	ls *-timeline.txt *-callgraph.txt
	exit 1
fi

echo
if [ -z "$timelines" ]; then
	echo "No timeline reports could be generated."
else
	echo "TIMELINE REPORTS:"
	reports=""
	for i in $timelines; do
		name=${i##*/}
		name=${name%.txt}
		# '*' wildcard, so need to use ls (not xargs) below
		reports="$reports $dir/$name-*.png"
	done
	ls $reports|sed 's/^/- /'
fi

echo
if [ -z "$callgraphs" ]; then
	echo "No callgraph reports could be generated."
else
	echo "CALLGRAPH REPORTS:"
	for i in $callgraphs; do
		name=${i##*/}
		echo $dir/${name%.txt}.svg
	done|xargs ls|sed 's/^/- /'
	echo
	echo "Please use the 'rtrace-graphs-function' script to get more detailed"
	echo "callgraphs about things done through specific functions for:"
	ls $callgraphs|sed 's/^/- /'
fi

echo
echo "DONE!"
