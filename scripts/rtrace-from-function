#!/usr/bin/env python
#
# Script for calculating the amount of un-freed allocations originating
# from a given function in given rtrace report.
#
# This file is part of sp-rtrace.
#
# Copyright (C) 2006,2010 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
# Originally this file was a part of libleaks package, but moved
# to the sp-rtrace package during libleaks redesign.
#

import sys, re

if len(sys.argv) != 2:
    print "usage: %s <function name>  <  rtrace-report" % sys.argv[0].split('/')[-1]
    sys.exit(1)
func = sys.argv[1]

count = 0   # number of allocations
allocs = 0  # total amount of allocations so far
trace = []  # stacktrace for current allocation
stack = 1   # current stacktrace line number
sizes = 0   # number of allocations for current stacktrace
pattern = re.compile("^[0-9]+\. [^(]+\(([0-9]+)\)")
for line in sys.stdin:
    # new stacktrace?
    res = pattern.match(line)
    if res:
        # first alloc in stacktrace?
        if stack > 0:
            trace = [res.group(1)]
            stack = 0
            sizes = 1
        else:
            trace.append(res.group(1))
            sizes += 1
    # requested function found from trace?
    else:
        stack = 1
        if line.find(func) >= 0:
            # go through all allocation sizes for given trace
            while sizes > 0:
                sizes -= 1
                # size + average allocation overhead
                size = int(trace[sizes])
                #print sizes, size
                allocs += size
                count += 1

overhead = 8
print "%d un-freed allocations (estimated overhead %d bytes/alloc)," % (count, overhead)
print "totaling %d bytes + %d bytes overhead," % (allocs, count*overhead)
print "originate from: '*%s*'" % func
