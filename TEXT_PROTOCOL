Text data protocol
------------------

The text data is generated by post-processor and resolver. It contains the
binary data in human readable format plus additional information added
during post-processing and resolving.

1. Header
   Header consists of key=value pairs specifying general information about the 
   report. It is the first line in the report:
     version=<version>, source=<source>, timestamps=yes|no, resolved=yes|no,
       arch=<system architecture>, time=<start timestamp>
   Where:
     <version> - the format version
     <source>  - the name of the tool that generated the report (functracer-0.5,
                 libleaks etc)
     timestamps - 'yes' for timestamps in  allocation/deallocation reports
     resolved   - 'yes' for resolved names
     <system architecture> - the system architecture. Practically it's the 
                             DEB_BUILD_GNU_TYPE variable of dpkg-architecture.

2. Memory map
   Contains executable and library memory mapping information used to resolve
   names. Usually written in begining of the report, but can be anywhere (it
   must be written before its address range is used in backtraces).
     : <module path> => <start address>-<end address>
   Where:
     <module path>   - full path to the mapped file
     <start address> - the start address in hexadecimal format (0x...)
     <end address>   - the end address in hexadecimal format (0x...)

3. Comments
   Contains any additional information reported by the tracing tool, but not 
   used in the postprocessing. For example libleaks heap status information or 
   functracer debug information. Can be anywhere in the report file.
   Postprocessing utilities can parse comments to retrieve some additional 
   information, but unrecognized comments must be passed through unmodified (if
   the postprocessing keeps the same output format).
   Comments usually start with '#' character for better recognition, but it's
   not a requirement. All lines, not recognized as other record types, will
   be interpreted as comments.
   Comments where # is followed with ' ' (space) are treated as temporary
   comments and discarded by the next post-processor run.
     <information>
   Where:
     <information> - any additional information reported by the tracing tool.

4. Allocation report
   Contains information about resource (memory, file descriptors, GObjects) 
   allocation. 
     <index>. [@<context id>] \[<timestamp>\] <function name>\<<resource type>\>
	         (<resource size>) = <resource id>
     <bactrace>
   Where:
     <index>         - the allocation/deallocation report index.
     <context id>    - an optional context id (omitted if no contexts are set
                       during the allocation).
     <timestamp>     - optional timestmap, absent if the header 'timestamps' 
                       option is set to 'no' (in HH:MM:SS.ssssss format).
     <function name> - the function name, allocator of the resource.
     <resource type> - an optional resource type id (omitted if only one resource
                       type is being tracked). 
     <resourse size> - the size of the allocated resource (whenerver it's 
                       possible to calculate).
     <resource id>   - the resource identifier returned by allocator function
                       and used to uniquely identify the allocated resource (in
                       hexadecimal format 0x...).
     <arguments>     - A list of function arguments (see the arguments record
                       description for full specification).
     <backtrace>     - a backtrace of the alloacator function call (see the 
                       backtrace description for full specification).

5. Deallocation report
   Contains information about resource (memory, file descriptors, GObjects)
   freeing. 
   <index>. [@<context id>] \[<timestamp>\] <function name>\<<resource type>\>(<resource id>)
   <arguments>  
   <bactrace>
   Where:
     <index>         - the allocation/deallocation report index.
     <context id>    - an optional context id (omitted if no contexts are set 
                       during the dealocation).
     <timestamp>     - optional timestmap, absent if the header 'timestamps'
                       option is set to 'no' (in HH:MM:SS.ssssss format).
     <function name> - the function name, allocator of the resource.
     <resource type> - an optional resource type idomitted if only one resource
                       type is being tracked). 
     <resource id>   - the resource identifier returned by allocator function 
                       and used to uniquely identify the allocated resource (in
                       hexadecimal format 0x...).
     <arguments>     - A list of function arguments (see the arguments record
                       description for full specification).
     <backtrace>     - a backtrace of the alloacator function call (see the 
                       backtrace description for full specification).

6. Backtrace
   Contains stack trace of the caller function (with resolved or unresolved 
   names). The backtrace format is similar to gdb backtrace format:
      <tab><address>[ in <function>()][ from <module>| at <source location>] 
      ...
      <tab><address>[ in <function>()][ from <module>| at <source location>] 
   Where:
     <tab>              - a tabulation character for readibility and recognition.
     <module>           - name of the function module.
     <function>         - name of the function itself (optional, might be absent
                          if name resolving was not enabled).
     <address>          - the actual return address (in hexadecimal format).
     <source location>  - the function location in source file -
                          <line:line number>.

7. Context registry
    Contains information about used allocation contexts. Allocation contexts are
    used to mark allocations done during some time period (usually while some 
    specific task is completed). Context registry lists the used allocation ID's
    and their names:
      @ <context id> : <context name>
    Where:
      <context id>      - the allocation context id (context id basically is 
                          bit value to be set in allocation record context).
      <context name>    - user friendly context name.
    
8. Function argument list
   The function argument list is optional and is treated as comments by most 
   post-processing scripts. Contains a list of function argument values.
      $1 = <value>
      $2 = <value>
       ...
      $n = <value>
    Where:
      1...n             - the argument number
      <value>           - the argument value. Could have complex value for 
                          structure and array values.
			  
			  
9. Resource registry
    Contains information about tracked resource types. The resource types are
    used to identify resources when multiple modules or a mudule, tracking
    multiple resources is used.
      \<<id>\> : <type> (<desc>) [\[<flag1>[|<flag2>]...\]]
    Where:
      <id>    - the resource id.
	  <type>  - the resource type name.
	  <desc>  - the resource type description.
	  <flag1>, <flag2> .. - the resource behaviour flags.
	      refcount - speecifies that the resource allocs/frees uses reference 
	                 counting.
