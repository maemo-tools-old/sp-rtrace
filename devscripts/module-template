<script>
def ARG(name):
	return name
	
def REF(name):
	return "*(%s)" % name

class ArgStr:
	def __init__(self, name):
		self.name = name

	def getName(self):
		return "\"%s\"" % self.name

	def calcValue(self):
		return ""

	def getValue(self):
		return "(char*)%s" % self.name

class ArgHex:
	def __init__(self, name):
		self.name = name
	
	def getName(self):
		return "\"%s\"" % self.name
		
	def calcValue(self):
		return "char arg_%s[16]; snprintf(arg_%s, sizeof(arg_%s), \"0x%%x\", %s);" % \
			(self.name, self.name, self.name, self.name)
		
	def getValue(self):
		return "arg_%s" % self.name

class ArgInt:
	def __init__(self, name):
		self.name = name
	
	def getName(self):
		return "\"%s\"" % self.name
		
	def calcValue(self):
		return "char arg_%s[16]; snprintf(arg_%s, sizeof(arg_%s), \"%%d\", %s);" % \
			(self.name, self.name, self.name, self.name)
		
	def getValue(self):
		return "arg_%s" % self.name

</script>

/*
 * This file is part of sp-rtrace package.
 *
 * Copyright (C) 2010 by Nokia Corporation
 *
 * Contact: Eero Tamminen <eero.tamminen@nokia.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 */
#include "config.h"

/**
 * @file sp_rtrace_<$module.name>.c
 *
 * <$module.description>
 */
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <dlfcn.h>
#include <stdarg.h>
#include <unistd.h>
#include <pthread.h>
<for include in impl.include>
#include <$lt><$include><$gt>
</for>

#include "sp_rtrace_main.h"
#include "sp_rtrace_module.h"

#include "common/sp_rtrace_proto.h"

/* Module information */
static sp_rtrace_module_info_t module_info = {
		.type = MODULE_TYPE_PRELOAD,
		.version_major = <$module.version.split('.')[0]>,
		.version_minor = <$module.version.split('.')[1]>,
		.name = "<$module.name>",
		.description = "<$module.description>",
};

/* resource identifiers */
<for resource in sections("resource")>
<set flags = "SP_RTRACE_RESOURCE_DEFAULT">
<if resource.flags.find("refcount") != -1>
  <set flags = "%s | SP_RTRACE_RESOURCE_REFCOUNT" % flags>
</if>
static sp_rtrace_resource_t res_<$resource.name> = {
	.type = "<$resource.name>",
	.desc = "<$resource.description>",
	.flags = <$flags>,
};

</for>

 /*
  * file module function set
  */
  
<for function in sections("function")>
  <set fc = Function(function.proto)>
typedef <$fc.type> (*<$fc.name>_t)(<$fc.args>);
</for>

typedef struct {
<for function in sections("function")>
  <set fc = Function(function.proto)>
	<$fc.name>_t <$fc.name>;
</for>
} trace_t;

/* original function references */
static trace_t trace_off;
/* tracing function references */
static trace_t trace_on;
/* tracing function initializers */
static trace_t trace_init;

/* Runtime function references */
static trace_t* trace_rt = &trace_init;

/* Initialization runtime function references */
static trace_t* trace_init_rt = &trace_off;

/**
 * Enables/disables tracing.
 *
 * @param[in] value   enable tracing if true, otherwise disable it.
 * @return
 */
static void enable_tracing(bool value)
{
	trace_rt = value ? &trace_on : &trace_off;
}

/**
 * Initializes original function references.
 *
 * @return
 */
static void trace_initialize()
{
	static int init_mode = MODULE_UNINITIALIZED;
	switch (init_mode) {
		case MODULE_UNINITIALIZED: {
			<for function in sections("function")>
			  <set fc = Function(function.proto)>
			  <if hasattr(function, "symbol_name")>
			    <set name = function.symbol_name>
			  <else>
			    <set name = fc.name>
			  </if>
			trace_off.<$fc.name> = (<$fc.name>_t)dlsym(RTLD_NEXT, "<$name>");
			</for>
			init_mode = MODULE_LOADED;

			LOG("module loaded: %s (%d.%d)", module_info.name, module_info.version_major, module_info.version_minor);
		}

		case MODULE_LOADED: {
			if (sp_rtrace_initialize()) {
				sp_rtrace_register_module(module_info.name, module_info.version_major, module_info.version_minor, enable_tracing);
				<for resource in sections("resource")>
				sp_rtrace_register_resource(&res_<$resource.name>);
				</for>
				trace_init_rt = trace_rt;
				init_mode = MODULE_READY;

				LOG("module ready: %s (%d.%d)", module_info.name, module_info.version_major, module_info.version_minor);
			}
		}
	}
}

/*
 * tracing functions
 */
<for function in sections("function")>
  <set fc = Function(function.proto)>
static <$fc.type> trace_<$fc.name>(<$fc.args>)
{
	<set rc_expr = "">
	<set rc_decl = "">
	<if fc.type != "void">
	  <set rc_expr = "return rc;">
	  <set rc_decl = "%s rc = " % fc.type>
	</if>
<!-- call the original function -->
	<$rc_decl>trace_off.<$fc.name>(<$fc.arg_names>);
<!-- add synchronization if necessary -->
	<if hasattr(function, "sync")>
	backtrace_lock = 0;
	</if>
<!-- add call failure check -->
	<if hasattr(function, "fail")>
	if (<$eval(function.fail)>) return rc;
	</if>
<!-- get the function report name -->
	<if hasattr(function, "report_name")>
	  <set name = function.report_name>
	<else>
	  <set name = fc.name>
	</if>
<!-- determine call type (allocation/free) -->
	<if eval(function.res_size) == '0'>
	  <set type = "SP_RTRACE_FTYPE_FREE">
	<else>
	  <set type = "SP_RTRACE_FTYPE_ALLOC">
	</if>
<!-- define the call structure data -->
	sp_rtrace_fcall_t call = {
		.type = <$type>,
		.res_type = (void*)res_<$function.resource>.id,
		.res_type_flag = SP_RTRACE_FCALL_RFIELD_ID,
		.name = "<$name>",
		.res_id = (pointer_t)<$eval(function.res_id)>,
		.res_size = (size_t)<$eval(function.res_size)>,
	};

<!-- process arguments -->
	<if hasattr(function, "args")>
<!-- first format argument values -->
	<for arg in function.args>
	<set argobj = eval(arg)>
	<$argobj.calcValue()>
	  </for>
<!-- then prepare argument data structure -->
	sp_rtrace_farg_t args[] = {
	  <for arg in function.args>
	    <set argobj = eval(arg)>
		{.name=<$argobj.getName()>, .value=<$argobj.getValue()>},
	  </for>
		{0}
	};
	<else>
<!-- if no arguments were specified, set argument data structure reference to NULL -->
	sp_rtrace_farg_t* args = NULL;
	</if>
	sp_rtrace_write_function_call(&call, NULL, args);
	<$rc_expr>
}


</for>

static trace_t trace_on = {
<for function in sections("function")>
  <set fc = Function(function.proto)>
	.<$fc.name> = trace_<$fc.name>,
</for>
};


/* target functions */
<for function in sections("function")>
  <set fc = Function(function.proto)>
<$function.proto>
{
	<set rc_expr = "">
	<set rc_decl = "">
	<set rc_set = "">
	<if fc.type != "void">
	  <set rc_expr = "return rc;">
	  <set rc_decl = "%s rc;" % fc.type>
	  <set rc_set = "rc = ">
	</if>
	<$rc_decl>
	<if hasattr(function, "sync")>
	BT_EXECUTE_LOCKED(<$rc_set>trace_rt-><$fc.name>(<$fc.arg_names>), trace_off.<$fc.name>(<$fc.arg_names>));
	<else>
	<$rc_set>trace_rt-<$gt><$fc.name>(<$fc.arg_names>);
	</if>
	<$rc_expr>
}


</for>


/*
 * Initialization functions.
 */
<for function in sections("function")>
  <set fc = Function(function.proto)>
static <$fc.type> init_<$fc.name>(<$fc.args>)
{
	<set rc_expr = "">
	<set rc_decl = "">
	<if fc.type != "void">
	  <set rc_expr = "return rc;">
	  <set rc_decl = "%s rc = " % fc.type>
	</if>
	trace_initialize();
	<$rc_decl>trace_init_rt-><$fc.name>(<$fc.arg_names>);
	<$rc_expr>
}
</for>

static trace_t trace_init = {
<for function in sections("function")>
  <set fc = Function(function.proto)>
	.<$fc.name> = init_<$fc.name>,
</for>
};

/* */

/*
 * Library initialization/deinitialization
 */

static void trace_init_lib(void) __attribute__((constructor));
static void trace_fini_lib(void) __attribute__((destructor));

static void trace_init_lib(void)
{
	trace_initialize();
}


static void trace_fini_lib(void)
{
	enable_tracing(false);
	LOG("fini");
}

/**
 * Gets module information data.
 *
 * @return  the module information data.
 */
const sp_rtrace_module_info_t* sp_rtrace_get_module_info()
{
	return &module_info;
}


